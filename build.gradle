import com.modrinth.minotaur.dependencies.ModDependency

plugins {
	alias libs.plugins.quilt.loom apply false
	alias libs.plugins.minotaur
	alias libs.plugins.machete
}

subprojects {
	apply plugin: 'org.quiltmc.loom'
	apply plugin: 'com.modrinth.minotaur'

	repositories {
		maven {
			name = 'Modrinth'
			url = 'https://api.modrinth.com/maven'
		}
		maven {
			name = 'TerraformersMC'
			url = 'https://maven.terraformersmc.com'
		}
		maven {
			name = 'Auoeke'
			url = 'https://maven.auoeke.net'
		}
	}

	version = loom.modVersion

	loom {
		runtimeOnlyLog4j = project.name != 'clean_logs'
		runs {
			configureEach {
				vmArg '-Dmixin.debug.export=true'
			}
		}
	}

	tasks.named('prepareRemapJar') {
		dependsOn {
			tasks.named('optimizeOutputsOfJar')
		}
	}

	java.withSourcesJar()

	dependencies {
		minecraft libs.minecraft
		mappings(variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' })
		modApi libs.bundles.quilt

		modLocalRuntime libs.bundles.runtime

		if (project.hasProperty('midnightlib')) {
			modApi libs.midnightlib
			include libs.midnightlib
		}
	}

	modrinth {
		projectId = project.findProperty('modrinth_slug') ?: project.name
		gameVersions = [libs.versions.minecraft.get()]
		versionName = System.getenv().VERSION_NAME ?: versionNumber
		changelog = System.getenv().CHANGELOG ?: DEFAULT_CHANGELOG
		versionType = System.getenv().VERSION_TYPE ?: DEFAULT_VERSION_TYPE
		uploadFile = remapJar
		additionalFiles = [sourcesJar]
		syncBodyFrom = project.file('README.md').text +
			'\n' + rootProject.file('COMMON.md').text
	}

	tasks.modrinth.doFirst {
		if (project.hasProperty('additional_game_versions')) {
			project.additional_game_versions.split(', ').each {
				modrinth.gameVersions.add it
			}
		}

		['required', 'optional', 'incompatible', 'embedded'].each { String type ->
			if (project.hasProperty("${type}_dependencies")) {
				project."${type}_dependencies".split(', ').each { String dep ->
					modrinth.dependencies.add new ModDependency(dep, type)
				}
			}
		}

		if (project.hasProperty('midnightlib')) {
			modrinth.dependencies.addAll [
				new ModDependency('midnightlib', 'embedded'),
				new ModDependency('qsl', 'required'),
				new ModDependency('modmenu', 'optional'),
			]
		}
	}

	tasks.modrinth.dependsOn tasks.modrinthSyncBody

	if (project.hasProperty('no_modrinth')) {
		tasks.modrinth.enabled = false
		tasks.modrinthSyncBody.enabled = false
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'io.github.p03w.machete'

	group = 'com.emmacypress'
	archivesBaseName = project.name

	int javaVersion = Integer.parseInt(project.findProperty('java_version') ?: '17')

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = javaVersion
		it.sourceCompatibility = javaVersion
	}

	jar.from project.file('LICENSE').exists() ? project.file('LICENSE') : rootProject.file('LICENSE')
}
